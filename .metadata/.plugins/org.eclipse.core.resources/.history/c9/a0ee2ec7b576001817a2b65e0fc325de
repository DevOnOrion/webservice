package org.fkjava.cxf.ws.auth;

import java.util.Set;
import java.util.logging.Logger;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.cxf.binding.soap.SoapMessage;
import org.apache.cxf.interceptor.Fault;
import org.apache.cxf.phase.AbstractPhaseInterceptor;
import org.apache.cxf.phase.Phase;

//通过PhaseInterceptor可以指定拦截器在哪个阶段起作用
public class AuthInterceptor extends AbstractPhaseInterceptor<SoapMessage> {
	private static Log log = LogFactory.getLog(AuthInterceptor.class);
	
	public AuthInterceptor() {
		//super表示显式调用父类有参数的构造器。
		super(Phase.PRE_INVOKE);//该拦截器将会在调用之前拦截SOAP消息。
	}
	
	//实现自己的拦截器的时候，需要实现handleMessage方法
	//handleMessage方法中的形参就是被拦截到的Soap消息
	//一旦程序获得了Soap消息，剩下的事情就可以解析Soap消息，或者修改Soap消息。
	@Override
	public void handleMessage(SoapMessage msg) throws Fault {
		log.info("-------------"+msg);
		
		
	}

	
}
